[["index.html", "Sen2Cube.at Manual 1 About 1.1 Overview 1.2 Use cases 1.3 Next steps and how to start 1.4 More information and community access", " Sen2Cube.at Manual 2021-03-09 1 About This manual is intended for Sen2Cube.at users and is not a technical documentation. 1.1 Overview Sen2Cube.at is the first operational semantic Earth Observation data cube, allowing you to produce information from satellite imagery on a higher semantic level. That means, getting answers to questions such as “Which images are cloud-free in a specific area-of-interest?”, “What was the phenology of this agricultural field in 2019?”, “Which areas were permanently sealed in the last year?” and many more. To obtain these results you don’t need programming or be an expert with deeper knowledge of the raw image data. The Sen2Cube.at semantic image querying system is accessible as Web-application, in which queries can be formulated by intuitively combining several building blocks, that each represent a distinct, clearly defined task or value inside the semantic querying process. This manual contains the reference documentation of that interface. Sen2Cube.at is provided by the Department of Geoinformatics - Z_GIS at the University of Salzburg, in collaboration with the project partners: Sen2Cube.at is developed with support by the Austrian Research Promotion Agency (FFG) under the Austrian Space Application Programme (ASAP 14) within the project Sen2Cube.at (project no.: 866016). 1.2 Use cases Sen2Cube.at is designed as a general-purpose Earth observation expert system to support and facilitate a great variety of use-cases. The ones listed here are selected and serve as introduction. 1.2.1 Semantic content-based image retrieval As a common task the Sen2Cube.at system may be used for a content-based search of suitable images, e.g., images that are cloud-free in a certain area-of-interest. For example, suppose you are interested in the phenology and cloud-free observations of the agricultural field depicted in the screenshot below. While the acquisition on 21st of October 2018 was quite cloudy, the observations of this particular field are perfectly valid and useful for further investigation. Why we need SCBIR However, if you search for images using the image-wide cloud statistics that are common in image databases, this image will never be returned due to the overall cloud contamination. In contrast, the Sen2Cube.at system allows to specify explicitly an area-of-interest and a cloud filter that will be evaluated only for this area. Subsequently, you receive better information about which images can be used or not for your application. SCBIR in Sen2Cube.at Why don’t you try it out on your own? After reading the “Getting started” chapter, come back here and use the “SCBIR - Cloud” model, this area-of-interest and October 2018 as time interval. 1.2.2 Cloud-free composite Most applications for Earth observation of land consider clouds as noise and not as valid observations. One approach to manage cloud contamination that is feasible in many situations is to create a cloud-free composite, i.e., an artificial image where cloud-free pixels are selected and stitched together using some user-defined rules. Since a basic interpretation of the observations are already available in Sen2Cube.at, a cloud-free composite based on pre-selecting valid observations is easily possible. This example is an artificial image of cloud-free Vienna during Summer 2018: Cloud-free Vienna You may notice that the extent is cropped to the borders of Vienna: You don’t have to digitize your area-of-interest manually. Every valid GeoJSON can be input, even if it is located online. Here, the borders are directly downloaded as OGC Web Feature Service from the Open Data Portal of Vienna. The Stubaital during spring reveals that there is still snow on the higher elevated areas. Cloud-free Stubaital A cloud-free composite of observations from spring is not useful for your application? No problem - chose any other time interval. You don’t need to rely on pre-manufactured cloud-free composites. In Sen2Cube.at, you can configure these parameters and produce ad-hoc cloud-free composites from an area-of-interest and a time interval you are interested in. The result of every inference is available as OGC Web Map Service - you can simply add them in your GIS. 1.2.3 Time series Continuous Earth observation with acquisition frequencies of a few days allow to extract relevant patterns based on (long) time series of a selected variable. For example, by using the appearance of “greenness” of the observations as variable of interest, it is possible to trace back the land use change of this area where an industrial/commercial building was constructed on a meadow. Construction of a building You can see how in the first year of operational Sentinel-2 image acquisition (2015-2016) the temporal pattern indicates the yearly cycle of vegetation on northern hemisphere, while after the construction and opening of the building in May 2018 the temporal pattern changed completely. The remaining variations are due to noise and perhaps smaller patches of grass in between of the buildings. Using the same greenness variable applied to agricultural fields may reveal changes in crop types or agricultural use. In this example, the use of one agricultural field changed between 2018 and 2019. While you can identify two main peaks in the years until (and including) 2018, there is only one peak in 2019 and 2020. Agriculture 1.2.4 Spatially disaggregated information Surface water Some borders that are defined in (vector) databases of geographical objects indicate only one or an averaged one One example are water bodies: While they are represented as stable with a clearly defined border, they undergo many changes over time. Spatially disaggregated information from Earth observation data allows to investigate these in unprecedented spatio-temporal detail. Earth observations of one year covering parts of the Lake of Constance reveals the dynamics at the mouth of the Rhine River and the Bregenzerach and allows to see more details than the simple polygon in the geographical database Lake of Constance Salzburg lakes Another use case of spatially disaggregated information is to detect missing or changed geographical objects in other databases. For example, the dam “Donaukraftwerk Melk” is not yet present in the geographical database … Dam is missing in geographical database … it is already clearly visible in the Earth-observation-based information. Dam is missing in geographical database Urban green areas Other geographical phenomena and objects might be spatially arranged within a region. For example, take the green areas within Vienna, which are an important contribution to well-being of humans and animals and are able to cool down the city in summer. We will again use the official borders as distributed by the Open Data Platform. The result map shows the percentage of valid observations (i.e. observations that are not cloud) that are associated with a vegetation type for the specified timespan. Viennas green areas Further re-use of intermediate results is also possible. For example, the color ramp produces a nice visual output, but it might be more useful to apply a threshold and finally delineate areas that might be considered stable vegetation or green spaces. Viennas green areas - delineated according temporal occurrency 1.3 Next steps and how to start The Sen2Cube.at system was not explicitly designed for any of the use-cases presented in the last section. All of them were created using the same, generic semantic enrichment and generic building blocks of the semantic query language to construct the different queries for each example. Still, it is not necessary to do any programming - you don’t have to trade-of between the need of programming or flexibility of the software. A good start to get familiar with the Sen2Cube.at system is to read how we conduct the Semantic Enrichment of Earth observation data and then proceed with the Getting Started section and try to use or build your first model. 1.4 More information and community access This manual gives a lot of information how to use the Sen2Cube.at system; still, some parts might be unclear or specific question may arise. Feel free to use our community forum to ask: https://forum.sen2cube.at/. The forum-account (including username and password) is the same as your overall Sen2Cube.at account. Thus, you can directly login by clicking on the icon below the text “Alternative Login” … … and you will be forwarded to the Sen2Cube.at login page and then redirected to the forum. "],["enrichment.html", "2 Semantic Enrichment 2.1 Satellite Image Automatic Mapper (SIAM)", " 2 Semantic Enrichment Semantic enrichment in the EO imagery domain refers to interpreted content of EO imagery (i.e., mapping data to symbols that represent stable concepts). In the case of EO imagery represented in a raster (i.e., image), this means mapping each raster cell (i.e., pixel) to an interpretation that represents a stable concept. These concepts are generally non-ordinal, categorical variables, however, subsets of these variables may be ordinal (e.g., vegetation categorized by increasing greenness or intensity). The relative level of semantic enrichment can vary in terms of complexity and the “symbolic” level of the concepts/variables. Concepts represented by a relatively lower level of semantic enrichment could be considered semi-symbolic, meaning that they are a first step towards connecting sensory data to symbolic, semantic classes (e.g., color as perceived by human vision, multi-dimensional “color”, other ways of characterising the spatio-temporal context of each observation). A relatively high level of semantic enrichment refers to explicit expert knowledge or existing ontologies (e.g., land cover classification system (LCCS) developed by the United Nations Food and Agriculture Organisation (UN-FAO)). Semantically enriched EO imagery time-series can be used to create semantically-enabled EO data cubes (i.e., semantic EO data cubes). There are multiple methods and tools that exist for semantically enriching EO imagery. In the context of the Sen2Cube.at project, the SIAM software has been used, but others are possible. 2.1 Satellite Image Automatic Mapper (SIAM) The SIAM software generates relatively low-level, generic, data-derived semantic enrichment that is application- and user-independent, meaning it is able to support multiple application domains. Using a per-pixel physical spectral model-based decision tree, SIAM automatically categorizes EO imagery that is calibrated to at least top-of-atmosphere (TOA) reflectance from multiple optical sensors (e.g., Sentinel-2, Landsat-8, AVHRR, VHR). SIAM is considered automatic because it runs without any user-defined parameterisation or training data, instead relying on a priori knowledge. The decision tree maps each calibrated observation to one stable, sensor-agnostic multi-spectral color name (i.e., category) based on its location in a multi-spectral reflectance hypercube. The result is a discrete and finite vocabulary for observations that refer to a hyper-polyhedra (e.g., multi-dimensional shape) within a multi-spectral feature space. This vocabulary (i.e., color names/categories) is mutually exclusive (i.e, every observation belongs to one single partition) and totally exhaustive (i.e., the entire multi-spectral reflectance hypercube is partitioned). These color names have semantic associations using a knowledge-based approach. These color names are semi-symbolic, and can be thought of as stable, sensor-agnostic visual “letters” that can be used to build “words” (i.e., symbolic concepts) that have a higher semantic level using knowledge based rules. The relatively low level semantic enrichment automatically generated by SIAM has been independently validated up to a continental scale. The software is capable of producing different granularities (i.e. different number of color names) from coarse (i.e., 18 color names) to fine (i.e., 96 color names), as well as additional data-derived information layers (e.g., multi-spectral greenness index, brightness). SIAM’s 33 color name granularity is exemplarily utilized within the Sen2Cube.at project as the basis for semantic queries. The following table shows the legend of the SIAM names (spectral categories) that can currently be selected and used in Sen2Cube.at for analyses and evaluations through time: Table 2.1: 33 SIAM color names available in Sen2Cube.at Nr Abbreviation Description of the spectral category (not land cover) category 1 SVHNIR Strong vegetation with high NIR appearance 2 SVLNIR Strong vegetation with low NIR appearance 3 AVHNIR Average vegetation with high NIR appearance 4 AVLNIR Average vegetation with low NIR appearance 5 WV Weak vegetation appearance 6 SHV Shadow area with vegetation appearance 7 SHRBRHNIR Shrub Rangeland with High NIR appearance 8 SHRBRLNIR Shrub Rangeland with Low NIR appearance 9 HRBCR Herbaceous Rangeland appearance 10 WR Weak Rangeland appearance 11 PB Pit or bog appearance 12 GH Greenhouse appearance 13 VBBB Very bright barren land or built-up appearance 14 BBB Bright barren land or built-up appearance 15 SBB Strong barren land or built-up appearance 16 ABB Average barren land or built-up appearance 17 DBB Dark barren land or built-up appearance 18 WBBorSHB Weak barren land or Shadow area with Barren Land appearance 19 NIRPBB Near InfraRed-Peaked Barren land or Built-up appearance 20 BA Burned area appearance 21 DPWASH Deep water or shadow appearance 22 SLWASH Shallow water or shadow appearance 23 TWASH Turbid water or shadow appearance 24 SASLWA Salty Shallow Water appearance 25 CL Cloud atmoshpere 26 SMKPLM Smoke Plume atmoshpere 27 TNCLV Thin clouds over vegetation appearance 28 TNCLWA_BB Thin clouds over water area or Barren land or Built-up areas appearance 29 SN Snow or water ice appearance 30 SHSN Shadow Snow appearance 31 SH Shadow areas appearance 32 FLAME Flame appearance 33 UN Unknown appearance 255 NO DATA No data The following additional information layers are available: Greenness The greenness information layer is a multi-spectral greenness index (&gt; 0) in the appearance category. Greenness Information Layer. Brightness The brightness information layer is a brightness index (&gt; 0) in the appearance category. Brightness Information Layer. Haze mask The haze mask information layer is a haze mask with five categories in the atmosphere category. Haze Information Layer. 2.1.1 Applied in Austria Here are a few examples of the generic, low level semantic enrichment generated by SIAM at its highest granularity (i.e., 33 color names) applied to Sentinel-2 imagery. These color spaces are represented by colors based on their semantic association: Legend for SIAM color names grouped by related semantic associations and represented by related colors for visualisation. Sentinel-2 imagery covering Austria from 18 September 2019, 05 April 2020 and 24 June 2020 have been exemplarily discretized into multi-spectral color spaces with SIAM. Sentinel-2 true color image from 18 September 2019 SIAM enrichment of the Sentinel-2 data from 18 September 2019 Sentinel-2 true color image from 05 April 2020 SIAM enrichment of the Sentinel-2 data from 05 April 2020 Sentinel-2 true color image from 24 June 2020 SIAM enrichment of the Sentinel-2 data from 24 June 2020 "],["start.html", "3 Getting started 3.1 Components 3.2 Workflow 3.3 Other access options", " 3 Getting started Sen2Cube.at is a Web-application that can be accessed with a standard browser over the Internet. Installing additional software on your local computer is not necessary. The graphical frontend of our semantic querying interface is available online at demo.sen2cube.at. Please consult the contact section for options to get access to the demo version. 3.1 Components Inferring information from data using an expert system (information processing system) is typically achieved by combining a knowledgebase and a factbase that allows the inference engine to process large volumes of data automatically. The knowledgebase contains general or specific knowledge of the world, expressed in rulesets and encoded in models. Thus, the knowledgebase is augmented incrementally through using the system. The factbase contains the raw image data as well as the semantically enriched data. A semantic query in the Sen2Cube.at system has three main components: Model: This is the part of the knowledgebase that is used to infer new information. It is a set of rules in which the semantic concepts are defined, and the desired results are formulated. area-of-interest: This defines the spatial extent (subset) of the factbase that will be input to the inference engine. Time Interval: This defines the temporal extent (subset) of the factbase that will be input to the inference engine. A semantic query is the execution of a model from the knowledgebase against a selected spatio-temporal subset of the factbase through which new information is inferred. Additionally, it is possible to execute a model in preview mode. This is a setting of the inference engine options and available for all types of models. A query in preview mode generally will be executed faster as the spatial resolution is reduced by a factor of 10. See the section below for more information. 3.2 Workflow In the Sen2Cube.at Web-application, each component corresponds to one pane on the left side of the main page. 3.2.1 Selecting the model Clicking Browse all models shows the models, which are already within the knowledgebase and can be used directly. At the end of that list, you can click the + icon to construct a new model. For that, read the documentation on model construction (4). Deleting a model is only possible if it was not used in an inference, i.e.., a semantic query. As information processing system, Sen2Cube.at does not allow to maintain inferences without associated models. Thus, deleting all associated inferences is required prior to deleting a model. 3.2.2 Selecting the area-of-interest The area-of-interest can be drawn within the country borders of Austria, in three different ways: As a point or a set of points. As a line or a set of lines. As a polygon or a set of polygons. Valid areas-of-interest can also be non-rectangular shaped or non-continuous. The drawn shapes are internally translated into GeoJSON format. Alternative to manually drawing the areas-of-interest on the map, it is also possible to use already defined representations of common areas-of-interest, such as agricultural fields, municipalities etc. A valid GeoJSON file can be directly uploaded or linked through standard WFS service that allows specifyig GeoJSON as output format such as this one: https://demo.sen2cube.at/ows/000/?service=WFS&amp;version=1.1.0&amp;request=GetFeature&amp;outputFormat=application/json&amp;srsname=EPSG:4326&amp;typename=inspire_feldstuecke_2019&amp;Filter=&lt;Filter&gt;&lt;PropertyIsEqualTo&gt;&lt;PropertyName&gt;FS_KENNUNG&lt;/PropertyName&gt;&lt;Literal&gt;73898247&lt;/Literal&gt;&lt;/PropertyIsEqualTo&gt;&lt;/Filter&gt; Here is an example of how areas-of-interest can be selected Workflow of selecting areas-of-interest using drawing functionality and OGC Web Feature Services 3.2.3 Selecting the time interval The time interval is defined by a start date and an end date. The interval is closed at both sides, meaning that both the specified start date and end date are included. Currently, the Austrian semantic data and information cube contains data since the beginning of the operational phase of Sentinel-2 in Summer 2015 and is constantly updated with the most recent data. 3.2.4 Executing the query and inferring new information Once the model, the area-of-interest and the time interval are set, the semantic query can be executed by clicking Start inference. Depending on the size and complexity of the query, execution might take some time. Every semantic query, i.e., inference, will be created internally and executed by a worker as soon as resources are available. If the system is already busy, it may therefore take some time until the inference can be started. Please note that the inferences will stop automatically after 10 minutes. Please contact us if you want to process larger volumes of data. It is possible to stop an inference any time by clicking Abort inference. It may take some seconds until you receive the final notification that the inference was aborted. 3.2.5 Preview-mode The preview-mode can be used for prototypically and interactively develop and test semantic models. The spatial resolution will be reduced by a factor of 10, which usually reduces the processing time significantly. In the case of Sentinel-2 the processing and output pixel size will therefore not be 10x10, but 100x100 meters. Thus, keep in mind the side-effects that this setting may have. The following example illustrates the effect of the preview mode. They show the execution of the same semantic model of the same AOI and the same time interval, while the first picture shows the result of the query not executed in preview-mode and the second picture shows the result of the query executed in preview-mode: Query executed not in preview mode Query executed in preview-mode It is possible to see the effects of the coarser spatial resolutions, not only less detailed outlines and crossings, but also some entities are completely hidden, e.g. the infrastructure that guides the river water and the sediments to deeper parts of the lake. In the result it will be indicated whether a query was executed in preview-mode or not. 3.2.6 Viewing and downloading the results When successfully processed, results can be viewed by clicking the View results button that will appear. Results with a spatial dimension will be visualized on a map, and results with only a temporal dimension will be visualized as a line graph if the data values are numerical. Results of semantic content-based image retrieval will be visualized in calendar. Most other types of data will be visualized as a plain list. Besides the visualization, there is also the option to download the results as either a GeoTIFF (for spatial data) or CSV (for non-spatial data) file. You can also choose to download a result as a QGIS Project File or directly input the results as OGC WMS. We recommend that you download important results as they will be deleted regularly. However, we will keep the inference settings, which allows you to re-process them at any time. 3.2.7 Error handling In the case the query could not be processed successfully, an error message describing the problem will appear instead. 3.2.8 Examples The entire workflow of using a prepared model to conduct a semantic query can be seen in the video below. A simple model to count water observations is used to infer information on the water dynamics of the Danube river in the protected areas south of Vienna. An example of a Sen2Cube.at inference workflow An example of a Sen2Cube.at inference workflow including exporting the results as OGC Web Map Service 3.3 Other access options If you have experience with other Earth observation data cubes you might be familiar with Jupyter Notebooks. Of course they are available in Sen2Cube.at as well: https://demo.sen2cube.at/notebook/sen2cube. … but in the semantic querying language you don’t have to do programming at all! "],["model.html", "4 Model structure", " 4 Model structure The model itself defines the output. Besides choosing from pre-constructed models within the knowledgebase, new models can be constructed from scratch. There are two main components that define a model: The semantic concept dictionary serves as a translator between descriptions of real-world entities and raw image data. For example, if we want to know which observations can be identified as water, we need to specify how we define water given the data that we have. What does water mean in terms of our data values? Creating a semantic concept dictionary requires expert knowledge and is usually not a task that non-experts take on by themselves. The application component is then used to formulate the semantic query by using the defined semantic concepts directly. Since it is defined what water means in terms of the data, we don’t have to worry about the raw data anymore, but can use common language to describe our desired output. For example “how many observations where defined as water inside my area-of-interest, during July 2020”. Such a question forms a single result. A model can contain multiple results. The model construction is designed to be as intuitive as possible by connecting several building blocks, that all represent a distinct, clearly defined task or value. See the building blocks chapter (5) for an in-depth description of them. The starting point is an empty model: See below an example of a simple model. In the semantic concept dictionary, the entity water is defined in terms of the data. Each observation inside the spatio-temporal extent of the query is labelled as either being water, or not. The application component contains a single result, in which the number of water observations are counted over time. Example model for counting water observations over time The result is a map in which each spatial location (modelled as a cell in a spatial grid) contains a water count value. Result of counted observations over time The following video shows the development process of a model (External Youtube Link). "],["blocks.html", "5 Building blocks 5.1 Definitions 5.2 Data and information 5.3 Verbs 5.4 Combiners 5.5 Time 5.6 Space 5.7 Comments", " 5 Building blocks Models are constructed by connecting several building blocks, where each block represents a distinct, clearly defined task or value. There are different classes of blocks, which are described in detail below. 5.1 Definitions Definition blocks store the output of a collection of other blocks, such that it can be accessed anywhere else in the model. Several types of definitions exist. All definitions must be named. Bear in mind that these names should be unique! 5.1.1 Entities and properties 5.1.1.1 Entities An entity is an identifiable phenomenon of interest in the real world that is not further subdivided into phenomena of the same kind. For example, a lake or a field. The Sen2Cube.at system allows to refer to entities at different semantic levels, including water or vegetation. The capability of eventually selecting entities on a higher or lower semantic level depends on the capabilities of the Earth observation sensor, noise during the observation, and the model construction. Entity definitions describe for each observation if it is identified as being part of this type of entity or not in the spatio-temporal extent of the semantic query. For example, when we define the entity water, the entity definition will store a set of boolean observations having a value of True when it was identified as being water, and False otherwise. These observations are aligned along two spatial dimensions, i.e. the X and Y coordinates of the observations geographical locations, and one temporal dimension, i.e. the timestamps at which the observations were made. Therefore, we call this data structure a cube. See the illustration below, where blue blocks represent observations that were identified as water, and grey blocks represent observations that were not identified as water. The observations will be associated to an entity type, not an individual entity. This means that observations might be associated with an entity type water, but not to groups of observations that may constitute different water bodies. 5.1.1.2 Properties Entities are always defined by means of one or more properties. For example, a property of water may be its blueish color, but for larger water bodies also its approximate flatness (i.e. a slope of approximately 0%). An entity definition block thus must be followed by one or more property definition blocks. Properties must not be mutually exclusive and should not overlap, i.e., multiple properties will be always connected with AND. Consider a real-world entity lake where three properties color, texture, and compactness: They might be fuzzy or optional, but they are not either-or. I.e., a lake may appear blue as property color AND appear flat as property texture, but is not blue OR flat. There might be situations where one thinks of either-or options in some cases but this is an indicator that the property is not defined appropriately and should be solved differently. Entity definition blocks - and their corresponding property definition blocks - are exclusively used inside the semantic concept dictionary component of the model. In the application component, stored entity definitions can be retrieved, wrangled, and exported. 5.1.2 Results A result is the output of an inference, while one inference may have more than one results of different types. Depending on the processes that are used in the semantic query, results can be single values, one-dimensional arrays or multi-dimensional cubes. Result definition blocks are exclusively used inside the application component of the model. Stored result definitions can be retrieved at any place within other result definitions inside the same model. Not every result definition needs to be exported. That is, a result definition can also be used as a preliminary output that serves as intermediate step towards the final output of the semantic query. 5.1.3 Seasons and partitions 5.1.3.1 Seasons When performing analyses over time, splitting the temporal dimension is a common task. For example, instead of the overall water count, we are interested to know the average water count per season, or the ratio of summer water counts and winter water counts. Seasons that typically appear on temperate latitudes like summer and winter are specified. In Sen2Cube.at, there is the option for different definitions of seasons. For example: The harvesting season as the time period from August to October. The sowing season as the time period from March to May. The rain season as the time period from December to May. The dry season as the time period from August to November. 5.1.3.2 Partitions Distinct, but related seasons can then be combined into a partition of the temporal dimension. Just like summer, autumn, winter and spring together form the meteorological seasons, the defined harvesting and sowing seasons can together form the agricultural seasons, and the rain and dry season the tropical seasons. As can be seen, the custom defined partition does not have to fill up a full year. You are free to define any desired partition, as long as the included seasons span distinct time ranges. Season and partition definition blocks are considered semantic concepts, and are therefore exclusively used inside the semantic concept dictionary component of the model. Unlike entities and results, the seasons and partition definitions are not evaluated at the moment they are defined. The temporal dimension of a cube is only split at the moment a specific season or partition is referenced inside the application component of the model. 5.2 Data and information These blocks specify the access of the data and information in the factbase, e.g. reflectance values of satellite imagery or semantically enriched information. This is important for defining entities, but also, for example, for creating cloud-free mosaics. We separate the available data into the types appearance, atmosphere, reflectance, additional data sources such as topography, and artifacts. Further, some metadata from the Earth observation data can be accessed. 5.2.1 Appearance The appearance block refers to information about how an Earth observation measurement of the Earth’s surface looks based on an interpretation of what it represents. This can be calculated indices (e.g. multi-spectral greenness indices, multi-spectral brightness values) or categories (e.g. multi-spectral color spaces/categories) with some level of semantic association. In the case of the Sen2Cube.at project, SIAM semantic enrichment generates color types with low-level semantic association that are accessible using these blocks. This block is mainly used in the Sen2Cube.at system and relates to all land cover and land use questions. 5.2.2 Atmosphere The atmosphere block refers to all interpretations of measurements or additional information associated with atmospheric phenomena or influences of an image (i.e., not the Earth’s surface). This includes estimates of haze, cloud cover, fog, airborne particulates, etc. that inhibit Earth surface applications, or are of specific interest to atmospheric applications. For example, clouds may be treated as noise in most applications related to land cover, however, might be specifically selected to query for cloud-free images. 5.2.3 Reflectance The reflectance block refers to calibrated reflectance values (e.g. top-of-atmosphere, bottom-of-atmosphere) of the Earth observations. The reflectance values can be directly accessed using this data block on an individual band basis for a given sensor (i.e. calibrated pixel values in each captured band for a given sensor/platform). An example application of this value is to create a cloud-free composite or retrieving the most recent image with less than 10% clouds. 5.2.4 Topography The topography block refers to any data or information related to the Earth’s topography (e.g. digital elevation models with derived aspect and slope). Example applications might be to to separate observations that appear as water or shadow in mountainous areas or to stratify vegetation phenology. Accessing these data is not yet supported and will be available soon. 5.2.5 Artifacts The artifacts block includes all measurements or interpretations of measurements that may be associated with some errors or noise of invalid measurements (i.e., clouds don’t fall in this category). An example application of this block is to create quality layers with perceived or detected measurement errors or to investigate effects of differences in quality across an image or edges of acquisition swaths. 5.2.6 Metadata The metadata block includes descriptive and technical metadata of the original satellite images. An example application is to identify the timestamps from individual pixels that contributed to the cloud-free composite if a best-available-pixel approach is is used. Currently, timestamps are the only supported metadata return value. 5.3 Verbs The core processing blocks are called verbs. Each verb represents a specific action that can be applied to a data cube. The verb blocks are therefore labelled with a single action word (i.e. a verb) that describes what the process is doing. Such an action is always applied to a specific cube, like a stored entity or result definition, or some retrieved source data. In terms of blocks, this is modelled by a with-do structure, where a cube is referenced in the with part, and the action to be applied to it in the do part. For example, a single reduction over time applied to our defined water entity cube will look like this: Often, it is desired to apply more than one action to the same cube. This is possible by providing a chain of verbs, where the output of the first process forms the input for the second process, et cetera. For example, start with the water entity cube, invert the True and False values, then keep only the True values, and then reduce that filtered cube over time. Hence, the processing chain is arranged in the logical order of how you also think about the task. Each verb block is described in more detail below. 5.3.1 Evaluate The evaluate verb evaluates an expression for each observation in the input cube. An expression is structured as follows: \\[ Expression = (Value, Math Operator, Value) \\] In our case, the left hand value is an observation from the input cube to which the verb is applied. The right hand value can be a corresponding observation from another cube, a list of numbers, or even a single number. Since the expression is evaluated for each observation in the input cube, the output of the evaluate block is a new cube with the same dimensions as the input cube. This is illustrated in the figure below. The blue cube on the left forms the left hand side of the expression, the red cube in the middle forms the right hand side of the expression. The cube on the right with mixed colors is the output of the evaluation. In this case, the blue and red cube have exactly the same dimensions, meaning that each observations in the blue cube has a corresponding observation in the red cube. Lets say we use the mathematical operator + as our operator. Then, the value of observation #1 - lets say that is the one on the bottom-left edge - in the output cube equals the value of observation #1 in the blue cube added to the value of observation #1 in the red cube. The same yields for all other observations. However, the cube on right hand side of the expression can have different dimensions than the one on the left hand side. For example, when our cube on the right hand side only has spatial dimensions, the right hand side values are duplicated for each timestamp in the left hand side cube. This also works the other way around. In jargon, this is called array broadcasting. The same principle applies when the right hand side is only a single value. Then, this value is duplicated for each observation in the left hand side cube. Sen2Cube.at has several built-in operators that can be used to build expressions. Comparison operators: operators that compare values and return either True or False. These are =, in, &gt;, &lt;, ≥ and ≤. Logical operators: operators that combine boolean values (i.e. True and False). These are and and or. Algebraic operators: operators that combine numerical values. These are +, -, * and \\. The functionality of each supported operator is illustrated with toy examples below. The in operator is special, in the sense that each observation in the input cube is compared to a list of values, rather than to a single value. If the observed value is in the given list, the result will be True. If not, the result will be False. The same list of values is used for each observation in the input cube. Be aware what type of data both sides of the expression contain. For example, the logical operators are only useful when both sides of the expression contain boolean values (i.e. True or False). The algebraic operators only make sense for numerical values, and not for categories. Et cetera. 5.3.2 Filter The filter verb should only be applied to cubes that contain boolean data values. It then keeps only those values that are True, and removes the values that are False. Technically, this is the same as masking (see 5.3.6) a boolean cube by itself. 5.3.3 Group by and ungroup 5.3.3.1 Group by The group by verb splits the input cube into distinct groups, based on a given grouping variable. All subsequent operations will the be applied to each group separately, until the ungroup verb is called. At that point, the groups will be combined back together into a single cube. This workflow is also known as Split-Apply-Combine. For example, the input cube can be split into groups such that each group contains exclusively observations from a specific year. Then, these observations can be reduced over time and over space. What is left is a single value for each year. These values can be combined together along a new time dimension, in which each time coordinate refers to a year. The Sen2Cube.at interface offers several pre-defined grouping variables: Temporal grouping variables: grouping variables that will split the temporal dimension, such that each group contains exclusively observations taken within a specific time period. The variables to choose from are year, season, month, week, dayofyear and dayofweek. Spatial grouping variables: grouping variables that will split the spatial dimensions, such that each group contains exclusively observations taken within a specific sub-area inside the defined area-of-interest. Currently, only a single variable is supported, named spatialfeature. This requires the area-of-interest to consist of multiple, distinct spatial features (point, lines or polygons) that do not intersect with each other. Each of these distinct features will then form a group. It is also possible to group based on multiple grouping variables. For example, when having two years of data with at least one observation each month, grouping by month will result in 12 different groups. Observations from January in the first year, will end up in the same group as observations from January in the second year. However, when grouping by month and year, there will be 24 different groups. Such multiple grouping operations are enabled in the block interface by means of a group list block. Thirdly, you can also provide a defined custom partition (see ??) of the time dimension as a grouping variable. Currently, the Sen2Cube.at interface does not support cubes that have more than one temporal dimension, or more than two spatial dimensions. When grouping with a temporal grouping variable, each group represents a specific time period like a year, season or month. When combined back together into a single cube during ungrouping, a new time dimension is created in which each time coordinate refers to one of those groups. Since multiple time dimensions are not allowed, the original time dimension must be reduced before ungrouping. The same yields for spatial grouping operations. The original spatial dimensions must be reduced before ungrouping. 5.3.3.2 Ungroup After grouping, all subsequent operations will the be applied to each group separately, until the ungroup verb is called. At that point, the groups will be combined back together into a single cube. 5.3.4 Invert The invert verb should only be applied to cubes that contain boolean data values. It then replaces all True values by False values, and vice versa. 5.3.5 Label The label verb does not influence the data values in any way. It simply stores a label for the entire input cube. This is useful for example before concatenating (see 5.4.1) several cubes over a new dimension. The label of each cube will then serve as coordinate value of the new dimension. 5.3.6 Mask The mask verb applies a boolean value mask to the input cube. A boolean value mask is a cube with boolean data values (i.e. True and False). When an observation in the input cube corresponds to a True value in the mask, the observation is kept. However, when an observation in the input cube corresponds to a False value in the mask, the observation is removed. Similar to the evaluate verb, the boolean mask in a masking operation can have different dimensions than the input cube. For example, when the mask only has spatial dimensions, its values will be duplicated for each timestamp in the input cube. When the mask only has a temporal dimension, its values will be duplicated for each spatial location in the input cube. 5.3.7 Reduce The reduce verb applies a reduction function over a certain dimension or set of dimensions. That means that for each unique combination of coordinate values of all other dimension in the input cube, the values of the dimension(s) to be reduced over are summarized to a single value, based on some function. For example, assume a input cube with one temporal and two spatial dimensions. Basically, this means that for a each location in space, we have multiple observations, each made at a different moment in time. When we reduce this cube over the time dimension, using mean as reduction function, we reduce our observed values to only a single value per spatial location, equal to the average of all observed values at that location. This removes the time dimension, leaving us with a cube that only has spatial dimensions. Similarly, we can also reduce the spatial dimensions instead, ending up with a single value per timestamp. The Sen2Cube.at interface only supports reduction of the two spatial dimensions at once, and not of either the X or Y dimension separately. Sen2Cube.at has several built-in reduction functions that can be used. Be aware what type of data and what dimensions both the input cube contains. Some reduction functions are only useful when applied to boolean values (i.e. True and False). Others, for example calculation of the mean or the sum, make sense for numerical data, but not for categorical or boolean data. Et cetera. Also, some reduction functions are only meant to be applied to the time dimension, while others are only meant to be applied to the spatial dimensions. Two special reduction functions are area and duration. The first is meant to be applied to the spatial dimensions, and equals the count over space multiplied by the area of a single pixel in square meters. The latter is meant to be applied to the temporal dimension, and equals the count over time, after resampling the observations to day-level. That is, when there are two observations on the same day, they will be counted as one. 5.3.8 Replace The replace verb replaces the values of the valid observations of the input cube (so not the missing values!) by the values of the corresponding observations in another cube. 5.3.9 Select The select verb selects a subset of the coordinates of a certain dimension, and keeps only the observations in the input cube that align to those coordinate values. Currently, only subsetting the temporal dimension is possible. To do so, you can use one or more of the time value blocks (see 5.5), which represent either a time instant, time collection or time period. For example, a select operation could be to only keep those observations that were made within the time period between March 2020 and June 2020. Selection is similar to masking, in the sense that they both take a subset of the data. During masking, the subset is defined by another cube containing boolean values. During selection, however, the subset is defined by addressing coordinate values directly. 5.4 Combiners Verbs are applied to a single input cube, such as a stored entity or result definition, or some retrieved source data. However, it is also possible to first combine several cubes together into a single one, and apply verbs to that combined cube. The combiner blocks that facilitate this are described below. 5.4.1 Concatenate The concatenate combiner combines multiple input cubes along an existing or a new dimension into a single, larger cube. When combining along an existing dimension, this dimension must be present in all input cubes, and all input cubes need to have different coordinate values for that dimension. For example, input cube A has a time dimension with 01-01-2020 and 02-01-2020 as coordinate values. Input cube B has a time dimension with 03-01-2020 as coordinate values. Concatenating the two along the time dimension, results in a single cube with a time dimension of length 3, containing 01-01-20, 02-01-2020 and 03-01-2020 as coordinate values. Concatenating along a new dimension will create an output cube with a new dimension, for which observations coming from input cube A will have a coordinate value A, observations coming from input cube B a coordinate value B, etc. What we refer to as A and B will, in practice, be the label (see 5.3.5) associated with the input cube. Except the dimension to be concatenated over, all cubes provided to the concatenate combiner are expected to have matching shapes. 5.4.2 Compose The compose combines multiple cubes with boolean data values, into a single cube with categorical data values. It requires the input cubes to be distinct. With that we mean, when an observation in input cube A is True, the corresponding observations (i.e. having the same coordinates) in the other input cubes can not be True. Then, the output cube will assign category value 1 to all True-observations of input cube A, category value 2 to all True-observations of input cube B, et cetera. 5.4.3 Merge The merge combiner works the same as the evaluate verb (see 5.3.1), but allows for an expression with more than two variables. For example, cube A + cube B + … + cube n. It offers only the logical and algebraic operators. The output cube will always have the same dimensions as the first input cube. 5.5 Time Time value blocks refer to the temporal dimension of the query. They allow to subuset cubes by time, customly define seasons, et cetera. There are three different time value blocks. 5.5.1 Time instant A time instant is a specific moment in time. It can be modelled with three components: the year, the month and the day. That is, a fully specified time instant can be 2020-07-23. However, not all components need to be specified. One can also leave out the year, and create the time instant XXXX-07-23, which will refer to all 23rd of July dates in the overall time interval of the query. Similarly, 2020-07-XX will refer to all days in July 2020, and XXXX-07-XX to all days in July, for all years in the time interval. 5.5.2 Time periods A time period is a consecutive period of time, defined with a from time instant and a to time instant. The interval is closed at both sides, so both the from and to time instants are included in the time period. It is also possible to use not fully specified time instants. For example, the time period from XXXX-05-XX to XXXX-08-XX is the time period from May to August, no matter the year. Thus, when subsetting the time dimension of a cube with this time period, all timestamps that are in either May, June, July or August will be selected, for each year in the overall time interval. In a time period, the from time instant should always preceed the to time instant. Currently, that means it is not possible to create time periods like [from XXXX-11-XX to XXXX-01-XX], meaning from November to January. If you want to model such a period of time, you can use a time collection instead 5.5.3 Time collection A time collection is a list of time instants that do not have to be consecutive. For example, the time collection [XXXX-05-XX, XXXX-08-XX] refers to all timestamps in May and August. 5.6 Space Currently there is no support for spatial subsetting of cubes, or customly defining areas that divide the overall area-of-interest. Such functionalities might be added in the future. 5.7 Comments The comment block allows you to add comments to parts of your model, such that both your future self and others can better understand what is happening. Comment blocks can be added anywhere in the model, and will be ignored during evaluation. "],["examples.html", "6 Examples", " 6 Examples A wide-variety of example models that demonstrate the functionality of the Sen2Cube.at’s graphical semantic querying interface are included in the model pane of the Sen2Cube.at Demo. Calculating a cloud-free composite Counting water observations Semantic content-based image retrieval Per-parcel statistics of greenness over time Count vegetation observations and export the results using OGC Web Map Service "],["contact.html", "7 Contact", " 7 Contact Responsibility for Website content and editing Dirk Tiede University of Salzburg Department of Geoinformatics – Z_GIS Schillerstrasse 30 5020 Salzburg, Austria Tel: +43 (0) 662 / 8044-7565 dirk.tiede@sbg.ac.at Purpose of business: Research project developed with support by the Austrian Research Promotion Agency (FFG) under the Austrian Space Application Programme (ASAP 14) within the project Sen2Cube.at (project no.: 866016). "],["legal.html", "8 Legal Info 8.1 Proprietary Rights Acknowledgment 8.2 Trademarks 8.3 Licences 8.4 Liability 8.5 Information Duty to GPDR Art. 13 and 14 8.6 Additional legal info (in German only)", " 8 Legal Info 8.1 Proprietary Rights Acknowledgment © Copyright 2020 Department of Geoinformatics – Z_GIS, Austria. All rights reserved. The contents of the website are published in the World Wide Web for online access. All texts, images, figures, video, animation and sound data and their arrangements are the exclusive property of Z_GIS, the Sen2Cube.at project partners, and any respective copyright owner. This work is protected under the Austrian copyright law and other international copyright treaties and conventions. The data and the content of the website must not be copied, changed and placed on other websites for commercial use. We acknowledge that some images posted herein are provided by a respective third party and subject to their copyrights. Please contact us if you would like to use or distribute copies or excerpts for non-commercial purposes in electronic or printed forms. 8.2 Trademarks All labels, logos and trademarks can only be used with the expressed permission of Z_GIS or the respective third party. 8.3 Licences The intellectual property of all patents, trademarks and copyrights posted on this website are protected. This website does not permit the use of the intellectual property of Z_GIS or third parties. 8.4 Liability The text provided in the Sen2Cube.at manual Webpage has been reviewed with great care. However, the Sen2Cube.at project partners cannot guarantee the accuracy, completeness or validity of the information provided. Therefore the Sen2Cube.at project partners accept no liability for the contents provided. Links to other websites have been carefully selected. However, the project partners are not responsible for contents on any other websites. 8.5 Information Duty to GPDR Art. 13 and 14 8.5.1 General We take the protection of your personal data very seriously. We treat your personal data confidentially and in accordance to the statutory data protection regulations and this data protection declaration. Personal data are data with which you can be personally identified. This data sheet explains which data we collect and how we use them. It also explains how and for what purpose this is done. 8.5.2 Legal basis for processing person-related data We process personal data only if a legal basis exists: consent from the involved person (Art. 6 Paragraph 1 lit. a) GDPR) fulfilling a contract (Art.6 Paragraph 1 lit. b) GDPR) justified interests (Art.6 Paragraph 1 lit. f) GDPR) fulfilling legal obligations (Art. 6 Paragraph 1 lit. c) GDPR) 8.5.3 Processing of data, data categories and involved groups of persons All personal data are collected and processed in accordance with the EU Data Privacy Regulation (GDPR) We process the following data from you: Company or government authority name, name and first name of contact-persons and users, address, telephone and fax number, e-mail, bank details, contracts, orders, invoices, delivery notes. The data belong to the following data categories: Identification data, communication data, financial data, order data, contract data and billing data. The following groups of persons are affected: customers, contractors, service providers, job applicants, interested parties, employees. 8.5.4 Use of your personal data (purpose) These data are collected: to identify you as a user given a communicated user agreement if you send us an application We do not pass your data on to third parties unless it is necessary for the fulfilment of inquiries and orders (e.g. shipping, forwarding, etc.). 8.5.5 Your rights as an involved person As the involved person, you have at all times the right: to receive at no charge information about your person-related data (Art. 15 GDPR) to correct it (Art. 16 GDPR) to have these data deleted in compliance with any existing legal storage obligations (Art. 17 GDPR) to restrict (right to limitation of processing, Art. 18 GDPR) to data transferability (Art. 20 GDPR) to object (Art. 21 GDPR) to make a complaint to the competent supervisory authority (Art. 77 GDPR) 8.5.6 Revoking consent You may revoke any consent given at any time with effect for the future. If you wish to exercise your right to revoke, simply send an e-mail. 8.5.7 Deletion of person-related data The personal data collected by us are deleted after completion of the purpose while considering the legal storage obligations. 8.5.8 Technical organisational measures We take technical and organisational measures in order to process your data with a high degree of security. Particular emphasis is placed on the following points: Confidentiality (Art. 32 Paragraph 1 lit. b) GDPR), in particular access control and separation checks Integrity (Art. 32 Paragraph 1 lit. b) GDPR), in particular passing on, inputting, processing, documentation and order checks Availability and resilience (Art. 32 Paragraph 1 lit. b) GDPR), especially availability checks and recoverability Processes for regularly checking, assessing and evaluating (Art. 32 Paragraph 1 lit. d) GDPR; Art. 25 Paragraph 1 GDPR), in particular data protection management, data protectionfriendly pre-settings and organisational control 8.6 Additional legal info (in German only) 8.6.1 Offenlegung gemäß § 25 Mediengesetz Inhaber der Website: Interfakultärer Fachbereich für Geoinformatik – Z_GIS der Universität Salzburg, 5020 Salzburg. 8.6.2 Urheberrechte © Copyright 2020 Interfakultärer Fachbereich Geoinformatik – Z_GIS. Alle Rechte vorbehalten. Sämtliche Texte, Bilder, Grafiken, Video-, Animations- und Sounddateien sowie ihre Arrangements unterliegen dem Urheberrecht und anderen Gesetzen zum Schutz geistigen Eigentums. Sie, sowie der Inhalt dieser Webseiten, dürfen weder für gewerbliche oder kommerzielle Zwecke noch zur Weitergabe kopiert, verändert und auf anderen Webseiten verwendet werden. Wir weisen darauf hin, dass einige Webseiten Bilder enthalten, die dem Urheberrecht derjenigen unterliegen, die diese Z_GIS zur Verfügung gestellt haben. 8.6.3 Markenrechte Das Logo der Universität Salzburg sowie das Z_GIS-Logo und -Name sind registrierte Marken der Universität Salzburg bzw. von Z_GIS. 8.6.4 Haftung und Gewährleistung Alle Informationen auf den Webseiten stellt Z_GIS ohne jegliche Gewährleistung oder Zusicherung jedweder Art, sei sie ausdrücklich oder stillschweigend, zur Verfügung. Ausgeschlossen sind insbesondere alle, auch stillschweigenden Gewährleistungen betreffend etwaige kommerzielle Nutzung der Inhalte oder die Eignung der Webseiten für bestimmte Zwecke. Diese Webseiten wurde mit größtmöglicher Sorgfalt zusammengestellt. Trotzdem kann keine Gewähr für die Fehlerfreiheit und Genauigkeit der enthaltenen Informationen übernommen werden. Jegliche Haftung für Schäden, die direkt oder indirekt aus der Benutzung dieser Website entstehen, wird ausgeschlossen, soweit diese nicht auf Vorsatz oder grober Fahrlässigkeit beruhen oder eine Verletzung von Leib und Leben verursachen. 8.6.5 Aufsichtsbehörde der Universität Salzburg Bundesministerium für Wissenschaft, Forschung und Wirtschaft 8.6.6 Aufgaben der Paris-Lodron-Universität Salzburg Gemäß § 3 Universitätsgesetz 2002 erfüllt die Universität Salzburg im Rahmen ihres Wirkungsbereichs folgende Aufgaben: Entwicklung der Wissenschaften (Forschung und Lehre), Entwicklung und Erschließung der Kunst sowie Lehre der Kunst. Bildung durch Wissenschaft und durch die Entwicklung und Erschließung der Künste. Wissenschaftliche, künstlerische, künstlerisch-pädagogische und künstlerisch-wissenschaftliche Berufsvorbildung, Qualifizierung für berufliche Tätigkeiten, die eine Anwendung wissenschaftlicher Erkenntnisse und Methoden erfordern, sowie Ausbildung der künstlerischen und wissenschaftlichen Fähigkeiten bis zur höchsten Stufe. Heranbildung und Förderung des wissenschaftlichen und künstlerischen Nachwuchses. Weiterbildung, insbesondere der Absolventinnen und Absolventen von Universitäten. Koordinierung der wissenschaftlichen Forschung (Entwicklung und Erschließung der Künste) und der Lehre innerhalb der Universität. Unterstützung der nationalen und internationalen Zusammenarbeit im Bereich der wissenschaftlichen Forschung und Lehre sowie der Kunst. Unterstützung der Nutzung und Umsetzung ihrer Forschungsergebnisse in der Praxis und Unterstützung der gesellschaftlichen Einbindung von Ergebnissen der Entwicklung und Erschließung der Künste. Pflege der Kontakte zu den Absolventinnen und Absolventen. Information der Öffentlichkeit über die Erfüllung der Aufgaben der Universitäten. 8.6.7 Umsatzsteuer-Identifikationsnummer (UID) der Universität Salzburg ATU 57532824 "]]
